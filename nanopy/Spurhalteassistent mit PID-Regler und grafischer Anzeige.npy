const AIN1 = C_PIN_01           # AIN1 pin connected to IO01
const AIN2 = C_PIN_02           # AIN2 pin connected to IO02
const SERVO_CTRL = C_PIN_03     # servo control on IO03
const GRAYSCALE = C_PIN_07      # grayscale sensor on IN07

const MIN_DUTY_CYCLE = 0
const MAX_DUTY_CYCLE = 4095
const MIN_SERVO_POS = 102
const MAX_SERVO_POS = 512
const STRAIGHT = 0

const MINBRIGHT = 1295          # minimum brightness value from grayscale sensor
const MAXBRIGHT = 4095          # maximum brightness value from grayscale sensor
const TARGET_VALUE = (MAXBRIGHT-MINBRIGHT)/2+MINBRIGHT
const SERVO_DELAY = 70          # servo reaction delay
const SAMPLES = 5               # number of samples for each measurement
const SPEED = 25                # car speed (0-100)

const KP = 0.011                # proportionality factor: max. 35/1400 = 1/40 = 0.025
const KD = 0.007                # derivate factor
const KI = 0.01                 # integral factor

initGPIO(AIN1, OUTPUT)
initGPIO(AIN2, OUTPUT)
initGPIO(SERVO_CTRL, OUTPUT)

setPWMFrequency(50)             # default: 500 Hz
background(0, 0, 0)
textFont(FONT_ROBOTO_24)
clear()

def initGraph():                # draw coordinates
    clear()
    drawLine(0, 119, 239, 119)  # x-Achse
    drawLine(0, 0, 0, 239)      # y-Achse
    update()

def drawE(dist):                # plot deviation on display
    x = x + 1
    if (x > 239):               # start from beginning (left)
        x = 0
        initGraph()
    y = 119 - dist/10           # deviation in [0..1200]
    drawPixel(x, y)
    update()

def steer(angle):
    dutyCycle = map(angle, 90, -90, MIN_SERVO_POS, MAX_SERVO_POS)
    writePWM(SERVO_CTRL, dutyCycle)
    delay(SERVO_DELAY)

def drive(speed):
    writePWM(AIN1, 0)           # start/stop motor
    dutyCycle = map(speed, 0, 100, MIN_DUTY_CYCLE, MAX_DUTY_CYCLE)
    writePWM(AIN2, dutyCycle)

# initGraph()
steer(STRAIGHT)
drive(SPEED)
esum = 0
elast = TARGET_VALUE
x = 0

def onDraw():
	value = readADC(GRAYSCALE, SAMPLES) # average of SAMPLES values
    e = value - TARGET_VALUE
    esum = esum + e
    if (esum > 500):
        esum = 500
    elif (esum < -500):
        esum = -500
    edif = e - elast
    upid = -toInt(round(KP*e + KD*edif + KI*esum))
    elast = e
    steer(upid)
    print("upid: " + upid)

def onClick():
    drive(0)                    # stop motor